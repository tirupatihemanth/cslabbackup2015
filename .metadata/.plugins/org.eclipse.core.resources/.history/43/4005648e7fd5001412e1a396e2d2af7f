package cs13b027_lab8_1;

import java.util.LinkedList;
import java.util.Scanner;

public class FordFulkerson {

	private static int n, m, destIdx;
	public static void main(String[] args){
		
		
		Scanner input = new Scanner(System.in);
		n = input.nextInt();
		m = input.nextInt();
		Graph graph = new Graph(n, m);
		Graph residualGraph = new Graph(n,m);
		int nodeIdx1, nodeIdx2, capacity;
		destIdx = n-1;
		boolean stat;
		for(int i=0;i<m;i++){
			stat = false;
			 nodeIdx1 = input.nextInt();
			 nodeIdx2 = input.nextInt();
			 capacity = input.nextInt();
			 for(Edge edge: graph.getAdjacentEdges(nodeIdx2)){
				 if(edge.getSecondNode().getIndex() == nodeIdx1){
					 graph.getAdjacencyList().add(new LinkedList<Edge>());
					 residualGraph.getAdjacencyList().add(new LinkedList<Edge>());
					 n++;
					 graph.addEdge(nodeIdx1, n-1, capacity);
					 residualGraph.addUndirectedEdge(nodeIdx1, n-1, capacity);
					 graph.addEdge(n-1, nodeIdx2, capacity);
					 graph.addUndirectedEdge(n-1, nodeIdx2, capacity);
					 m+=2;
					 stat = true;
					 break;
				 }
			 }
			 if(!stat){
				 graph.addEdge(nodeIdx1, nodeIdx2, capacity); 
				 residualGraph.addUndirectedEdge(nodeIdx1, nodeIdx2, capacity);
			 }
		}
		
	}
	
	public static boolean getPath(Graph graph, int nodeIdx){
		if(nodeIdx == destIdx){
			return true;
		}
		
		for(Edge edge: graph.getAdjacentEdges(nodeIdx)){
			if(edge.getFlow() > 0){
				edge.setPathMark(true);
				getPath(graph, edge.getSecondNode().getIndex());
			}
		}
		
	}
	
	
}
