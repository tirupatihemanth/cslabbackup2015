public class Complex implements IComplex, Comparable {

	double real, imaginary;

	public Complex(double real, double imaginary) {
		this.real = real;
		this.imaginary = imaginary;
	}

	@Override
	public int compareTo(Object object) {
		// TODO Auto-generated method stub
		IComplex icomplex = (IComplex) object;
		if (Abs() == icomplex.Abs()) {
			return 0;
		} else if (Abs() > icomplex.Abs()) {
			return 1;
		} else
			return -1;
	}

	@Override
	public double Re() {
		// TODO Auto-generated method stub
		return real;
	}

	@Override
	public double Im() {
		// TODO Auto-generated method stub
		return imaginary;
	}

	@Override
	public double Abs() {

		// TODO Auto-generated method stub
		return Math.sqrt(real * real + imaginary * imaginary);
	}

	@Override
	public double Arg() {
		return Arg(real, imaginary);
	}

	public double Arg(double real, double imaginary) {
		// TODO Auto-generated method stub
		
		if (real > 0){
			return Math.atan(imaginary/real);
		}
		else if(real<0 && imaginary >0)
			return Math.PI - Math.atan(-real / imaginary);
		else if(real<0 && imaginary<0)
			return Math.PI + Math.atan(real/imaginary);
		else if(imaginary == 0)
			return Math.PI/2;
		else
			return 0;
			
	}

	@Override
	public IComplex conj() {
		// TODO Auto-generated method stub
		return new Complex(real, -imaginary);
	}

	@Override
	public IComplex log() {
		// TODO Auto-generated method stub
		return new Complex(Math.log(Abs()), Arg());
	}

	@Override
	public IComplex exp() {
		// TODO Auto-generated method stub
		return new Complex(Math.exp(real) * Math.cos(imaginary), Math.exp(real)
				* Math.sin(imaginary));
	}

	@Override
	public IComplex rotate(double radians) {
		// TODO Auto-generated method stub
		return new Complex(Abs() * Math.cos(Arg() + radians), Abs()
				* Math.sin(Arg() + radians));
	}

	@Override
	public IComplex stretch(double scale) {
		// TODO Auto-generated method stub
		return new Complex(Math.sqrt(scale)*real, Math.sqrt(scale)*imaginary);
	}

}
