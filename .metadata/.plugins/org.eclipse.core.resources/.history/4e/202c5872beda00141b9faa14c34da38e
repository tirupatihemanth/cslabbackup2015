import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.border.Border;


public class FrontendTTT {

	BackendTTT board;
	JFrame mainFrame;
	JPanel gameGrid;
	JButton gridButtons[][];
	JLabel statusLabel;
	public FrontendTTT(int size) {
		// TODO Auto-generated constructor stub
		this.board = new BackendTTT(size);
	}
	
	/**
	 * @wbp.parser.entryPoint
	 */
	public void makeGUI(){
		mainFrame = new JFrame("Tic - Tac - Toe");
		mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		mainFrame.setMinimumSize(new Dimension(300, 300));
		
		Container mainPane = mainFrame.getContentPane();
		
		JMenuBar menuBar = new JMenuBar();
		JMenu mainMenu = new JMenu("File");
		JMenuItem newGameItem = mainMenu.add("New Game");
		JMenuItem quitGame = mainMenu.add("Quit");
		newGameItem.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				newGame();
			}
		});
		quitGame.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				mainFrame.dispose();
			}
		});
		menuBar.add(mainMenu);
		mainPane.add(menuBar,BorderLayout.PAGE_START);
		
		statusLabel = new JLabel("Start New Game");
		mainPane.add(statusLabel, BorderLayout.PAGE_END);
		
		gameGrid = new JPanel(new GridLayout(board.size, board.size));
		gridButtons = new JButton[board.size][board.size];
		for(int i=0;i<board.size;i++){
			for(int j=0;j<board.size;j++){
				gridButtons[i][j] = new JButton();
				
				class MyListener implements ActionListener{

					short i,j;
					public MyListener(short i, short j) {
						// TODO Auto-generated constructor stub
						this.i = i;
						this.j = j;
					}
					@Override
					public void actionPerformed(ActionEvent e) {
						// TODO Auto-generated method stub
						if(board.player1){
							updateGridItem((JButton)e.getSource(), 1);
						}
						else{
							updateGridItem(JButton(e.getSource()), -1);
						}
					}
					
				}
				
				gridButtons[i][j].addActionListener(new MyListener((short)i,(short)j));
				updateGridItem(gridButtons[i][j], 0);
				gameGrid.add(gridButtons[i][j]);
			}
		}
		
		mainPane.add(gameGrid, BorderLayout.CENTER);
		mainFrame.pack();
		mainFrame.setVisible(true);
		
	}
	
	private void newGame() {
		// TODO Auto-generated method stub
		
		for(int i=0;i<board.size;i++){
			for(int j=0;j<board.size;j++){
				board.boardStatus[i][j] = 0;
				updateGridItem(gridButtons[i][j], board.boardStatus[i][j]);
			}
		}
		
		mainFrame.pack();
		
	}

	private void updateGridItem(JButton jButton, int status) {

			Image img = null;
			switch(status){
			case 0:
				try {
					img = ImageIO.read(new File(System.getProperty("user.dir")+"imgs/empty.png"));
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				break;
			case 1:
				try {
					img = ImageIO.read(new File(System.getProperty("user.dir")+"imgs/xicon.png"));
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				break;
			case -1:
				try {
					img = ImageIO.read(new File(System.getProperty("user.dir")+"imgs/oicon.png"));
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				break;
			}

			jButton.setIcon(new ImageIcon(img));

	}

	
	
	
	
}
