
public class polarComplex implements IComplex, Comparable<IComplex>{
	
	private double absoluteValue, argument;
	
	public polarComplex(double absoluteValue, double argument) {
		// TODO Auto-generated constructor stub
		this.absoluteValue = absoluteValue;
		this.argument = argument;
	}
	

	@Override
	public int compareTo(IComplex o) {
		// TODO Auto-generated method stub
		if(Abs()>o.Abs()){
			return 1;
		}
		else if(Abs()<o.Abs()){
			return -1;
		}
		return 0;
	}

	@Override
	public double Re() {
		// TODO Auto-generated method stub
		return absoluteValue*Math.cos(argument);
	}

	@Override
	public double Im() {
		// TODO Auto-generated method stub
		return absoluteValue*Math.sin(argument);
	}

	@Override
	public double Abs() {
		// TODO Auto-generated method stub
		return absoluteValue;
	}

	@Override
	public double Arg() {
		// TODO Auto-generated method stub
		return argument;
	}

	@Override
	public IComplex conj() {
		// TODO Auto-generated method stub
		return new polarComplex(absoluteValue, -argument);
	}

	@Override
	public IComplex log() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IComplex exp() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IComplex rotate(double radians) {
		// TODO Auto-generated method stub
		return new polarComplex(absoluteValue, argument+radians);
	}

	@Override
	public IComplex stretch(double scale) {
		// TODO Auto-generated method stub
		return new polarComplex(absoluteValue*2, argument);
	}

}
